// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by a tool (Spike Build).
//     Generated on: 13:46:32
//     Runtime Version: 4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//  </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Linq;
using System.Runtime.Serialization;
using System.Collections.Generic;
using Spike;
using Spike.Hubs;
using Spike.Network;
using Spike.Network.Http;

namespace Spike.Network
{
   #region Class: MyChatProtocol
   ///<summary>
   /// Represents a static class that performs all the necessary initialization routines for MyChatProtocol.
   ///</summary>
   public static class MyChatProtocol
   {
      ///<summary>
      /// Performs the necessary configuration. This method is automatically invoked by Spike-Engine runtime.
      ///</summary>
      [InvokeAt(InvokeAtType.Configure)]
      public static void Configure()
      {

         // Signature: MyChatProtocol.Pull.JoinMyChat.[].[]
         // Signature Digest: "84157E5C"
         PacketIndex.RegisterMetadata(new OperationInfo("84157E5C", true, null, CompressionTarget.None, Direction.Pull, null, null, null, null));

         // Signature: MyChatProtocol.Pull.SendMyChatMessage.[].[String]
         // Signature Digest: "BD7E2CA4"
         PacketIndex.RegisterMetadata(new OperationInfo("BD7E2CA4", true, null, CompressionTarget.Incoming, Direction.Pull, typeof(SendMyChatMessageRequest), SendMyChatMessageRequest.CreateInstance, null, null));

         // Signature: MyChatProtocol.Push.MyChatMessages.[ListOfByte.String].[]
         // Signature Digest: "F6F85E84"
         PacketIndex.RegisterMetadata(new OperationInfo("F6F85E84", true, null, CompressionTarget.Outgoing, Direction.Push, null, null, typeof(MyChatMessagesInform), MyChatMessagesInform.CreateInstance));

         ProtocolInfo.Register("MyChatProtocol", "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxQcm90b2NvbCBOYW1lPSJNeUNoYXRQcm90b2NvbCIgeG1sbnM9Imh0dHA6Ly93d3cuc3Bpa2UtZW5naW5lLmNvbS8yMDExL3NwbWwiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KICA8T3BlcmF0aW9ucz4NCg0KICAgIDwhLS0gU2ltcGxlIGpvaW4gY2hhdCBvcGVyYXRpb24gdGhhdCBwdXRzIHRoZSBjbGllbnQgdG8gdGhlIGNoYXQgcm9vbSAtLT4NCiAgICA8T3BlcmF0aW9uIE5hbWU9IkpvaW5NeUNoYXQiDQogICAgICAgICAgICAgICBTdXBwcmVzc1NlY3VyaXR5PSJ0cnVlIiAvPg0KDQogICAgPCEtLSBTaW1wbGUgc2VuZCBtZXNzYWdlIG9wZXJhdGlvbiB0aGF0IGJyb2FkY2FzdCB0aGUgbWVzc2FnZSB0byB0aGUgY2hhdCByb29tIC0tPg0KICAgIDxPcGVyYXRpb24gTmFtZT0iU2VuZE15Q2hhdE1lc3NhZ2UiDQogICAgICAgICAgICAgICBTdXBwcmVzc1NlY3VyaXR5PSJ0cnVlIg0KICAgICAgICAgICAgICAgQ29tcHJlc3Npb249IkluY29taW5nIj4NCiAgICAgIDxJbmNvbWluZz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJNZXNzYWdlIiBUeXBlPSJTdHJpbmciIC8+DQogICAgICA8L0luY29taW5nPg0KICAgIDwvT3BlcmF0aW9uPg0KDQogICAgPCEtLSBBIHB1c2ggb3BlcmF0aW9uIChzZXJ2ZXIgdG8gY2xpZW50KSB0aGF0IHNlbmRzIHRoZSBtZXNzYWdlcyB0byB0aGUgY2xpZW50cyAtLT4NCiAgICA8T3BlcmF0aW9uIE5hbWU9Ik15Q2hhdE1lc3NhZ2VzIg0KICAgICAgICAgICAgICAgU3VwcHJlc3NTZWN1cml0eT0idHJ1ZSINCiAgICAgICAgICAgICAgIENvbXByZXNzaW9uPSJPdXRnb2luZyINCiAgICAgICAgICAgICAgIERpcmVjdGlvbj0iUHVzaCI+DQogICAgICA8T3V0Z29pbmc+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iQXZhdGFyIiBUeXBlPSJMaXN0T2ZCeXRlIiAvPg0KICAgICAgICA8TWVtYmVyIE5hbWU9Ik1lc3NhZ2UiIFR5cGU9IlN0cmluZyIgLz4NCiAgICAgIDwvT3V0Z29pbmc+DQogICAgPC9PcGVyYXRpb24+DQogICAgDQogIDwvT3BlcmF0aW9ucz4NCjwvUHJvdG9jb2w+");
      }

      ///<summary>
      /// Performs the necessary initaliazation. This method is automatically invoked by Spike-Engine runtime.
      ///</summary>
      [InvokeAt(InvokeAtType.Initialize)]
      public static void Initialize()
      {

         // MyChatProtocol.Pull.JoinMyChat.[].[]
         PacketHandlers.Register("84157E5C", InternalJoinMyChat);

         // MyChatProtocol.Pull.SendMyChatMessage.[].[String]
         PacketHandlers.Register("BD7E2CA4", InternalSendMyChatMessage);
      }
      ///<summary>
      /// Event that is invoked when a request for JoinMyChat operation comes in.
      ///</summary>
      public static event RequestHandler JoinMyChat;

      private static void InternalJoinMyChat(IClient client, Packet requestPacket)
      {
         if(JoinMyChat != null)
            JoinMyChat(client);
      }
      ///<summary>
      /// Event that is invoked when a request for SendMyChatMessage operation comes in.
      ///</summary>
      public static event RequestHandler<SendMyChatMessageRequest> SendMyChatMessage;

      private static void InternalSendMyChatMessage(IClient client, Packet requestPacket)
      {
         SendMyChatMessageRequest request = requestPacket as SendMyChatMessageRequest;
         if(SendMyChatMessage != null)
            SendMyChatMessage(client, request);
      }
   }
   #endregion

   #region Class: MyChatProtocolExtensions
   ///<summary>
   /// Represents a static class that contains IClient extension methods for MyChatProtocol.
   ///</summary>
   public static class MyChatProtocolExtensions
   {
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendMyChatMessagesInform(this IClient client, byte[] Avatar, String Message)
      {
         MyChatMessagesInform packet = MyChatMessagesInform.Metadata.AcquireInform() as MyChatMessagesInform;
         packet.Avatar = Avatar;
         packet.Message = Message;
         client.Send(packet);
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendMyChatMessagesInform(this IClient client, MyChatMessagesInform packet)
      {
         client.Send(packet);
      }
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendMyChatMessagesInform(this IClient[] clients, byte[] Avatar, String Message)
      {
         using(MyChatMessagesInform packet = MyChatMessagesInform.Metadata.AcquireInform() as MyChatMessagesInform)
         {
            packet.Lifetime = PacketLifetime.Manual;
            packet.Avatar = Avatar;
            packet.Message = Message;
            for (int i = 0; i < clients.Length; ++i)
               clients[i].Send(packet);
         }
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendMyChatMessagesInform(this IClient[] clients, MyChatMessagesInform packet)
      {
         packet.Lifetime = PacketLifetime.Manual;
         for (int i = 0; i < clients.Length; ++i)
            clients[i].Send(packet);
      }
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendMyChatMessagesInform(this List<IClient> clients, byte[] Avatar, String Message)
      {
         using(MyChatMessagesInform packet = MyChatMessagesInform.Metadata.AcquireInform() as MyChatMessagesInform)
         {
            packet.Lifetime = PacketLifetime.Manual;
            packet.Avatar = Avatar;
            packet.Message = Message;
            for (int i = 0; i < clients.Count; ++i)
               clients[i].Send(packet);
         }
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendMyChatMessagesInform(this List<IClient> clients, MyChatMessagesInform packet)
      {
         packet.Lifetime = PacketLifetime.Manual;
         for (int i = 0; i < clients.Count; ++i)
            clients[i].Send(packet);
      }
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendMyChatMessagesInform(this IEnumerable<IClient> clients, byte[] Avatar, String Message)
      {
         using(MyChatMessagesInform packet = MyChatMessagesInform.Metadata.AcquireInform() as MyChatMessagesInform)
         {
            packet.Lifetime = PacketLifetime.Manual;
            packet.Avatar = Avatar;
            packet.Message = Message;
            foreach(var client in clients)
               client.Send(packet);
         }
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendMyChatMessagesInform(this IEnumerable<IClient> clients, MyChatMessagesInform packet)
      {
         packet.Lifetime = PacketLifetime.Manual;
         foreach(var client in clients)
            client.Send(packet);
      }
   }
   #endregion

   #region Class: MyChatProtocolHubBase
   ///<summary>
   /// Represents an optional, abstract hub class for MyChatProtocol.
   ///</summary>
   public abstract class MyChatProtocolHubBase : Hub
   {
      /// <summary>
      /// Constructs a new instance of a <see cref="MyChatProtocolHubBase"/> class. The instance will be locked
      /// with a default randomly generated publish key.
      /// </summary>
      public MyChatProtocolHubBase() : base()
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyChatProtocolHubBase"/> class. The instance will be locked
      /// with a default randomly generated publish key.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      public MyChatProtocolHubBase(string name) : base(name)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyChatProtocolHubBase"/> class. The instance will be locked with a 
      /// default randomly generated publish key.
      /// </summary>
      /// <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
      /// <param name="name">The name of the hub.</param>
      public MyChatProtocolHubBase(string name, bool autoRegister)
          : base(name, autoRegister)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyChatProtocolHubBase"/> class. 
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      /// <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
      public MyChatProtocolHubBase(string name, string defaultPublishKey, string defaultSubscribeKey)
          : base(name, defaultPublishKey, defaultSubscribeKey)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyChatProtocolHubBase"/> class.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      public MyChatProtocolHubBase(string name, string defaultPublishKey)
          : base(name, defaultPublishKey)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyChatProtocolHubBase"/> class.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      /// <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
      public MyChatProtocolHubBase(string name, string defaultPublishKey, bool autoRegister)
          : base(name, defaultPublishKey, autoRegister)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyChatProtocolHubBase"/> class.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      /// <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
      /// <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
      public MyChatProtocolHubBase(string name, string defaultPublishKey, string defaultSubscribeKey, bool autoRegister)
          : base(name, defaultPublishKey, defaultSubscribeKey,  autoRegister)
      {
      }

      /// <summary>
      /// Invoked when a new instance of a <see cref="Hub"/> is constructed.
      /// </summary>
      protected override void OnAfterConstruct()
      {
         // Call the base
         base.OnAfterConstruct();

         // Hook the handlers
         MyChatProtocol.JoinMyChat += this.OnJoinMyChat;
         MyChatProtocol.SendMyChatMessage += this.OnSendMyChatMessage;
      }

      /// <summary>
      /// Releases the unmanaged resources used by the ByteSTream class and optionally releases the managed resources.
      /// </summary>
      /// <param name="disposing">If set to true, release both managed and unmanaged resources, othewise release only unmanaged resources. </param>
      protected override void Dispose(bool disposing)
      {
         // Call the base
         base.Dispose(disposing);
         
         // Unhook the handlers.
         MyChatProtocol.JoinMyChat -= this.OnJoinMyChat;
         MyChatProtocol.SendMyChatMessage -= this.OnSendMyChatMessage;
      }


      /// <summary>
      /// Invoked when an incoming request for JoinMyChat operation comes in.
      /// </summary>
      public abstract void OnJoinMyChat(IClient client);

      /// <summary>
      /// Invoked when an incoming request for SendMyChatMessage operation comes in.
      /// </summary>
      public abstract void OnSendMyChatMessage(IClient client, SendMyChatMessageRequest packet);
   }
   #endregion

   #region Packet: SendMyChatMessageRequest
   /// <summary>
   /// SendMyChatMessageRequest defines a packet container object for the SendMyChatMessage operation.
   /// </summary>
   public sealed class SendMyChatMessageRequest: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public SendMyChatMessageRequest() : base(PacketKey.Get("BD7E2CA4"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public SendMyChatMessageRequest(String Message) : base(PacketKey.Get("BD7E2CA4"))
      {
         this.Message = Message;
      }


      /// <summary>
      /// Gets or sets the Message field. 
      /// </summary>
      public String Message;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Incoming; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Message);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Message = Reader.ReadString();
      }

      /// <summary>
      /// A factory method that constructs an instance of SendMyChatMessageRequest packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new SendMyChatMessageRequest();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("BD7E2CA4");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion

   #region Packet: MyChatMessagesInform
   /// <summary>
   /// MyChatMessagesInform defines a packet container object for the MyChatMessages operation.
   /// </summary>
   public sealed class MyChatMessagesInform: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public MyChatMessagesInform() : base(PacketKey.Get("F6F85E84"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public MyChatMessagesInform(byte[] Avatar, String Message) : base(PacketKey.Get("F6F85E84"))
      {
         this.Avatar = Avatar;
         this.Message = Message;
      }


      /// <summary>
      /// Gets or sets the Avatar field. 
      /// </summary>
      public byte[] Avatar;

      /// <summary>
      /// Gets or sets the Message field. 
      /// </summary>
      public String Message;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Outgoing; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Avatar);
         Writer.Write(Message);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Avatar = Reader.ReadByteArray();
         this.Message = Reader.ReadString();
      }

      /// <summary>
      /// A factory method that constructs an instance of MyChatMessagesInform packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new MyChatMessagesInform();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("F6F85E84");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion
}
